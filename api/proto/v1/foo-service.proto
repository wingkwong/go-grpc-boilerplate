syntax = "proto3";

option go_package="./;v1";
package v1;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

message SystemFields {
    string created_by = 1;
    string updated_by = 2;
    google.protobuf.Timestamp created_at = 3;
    google.protobuf.Timestamp updated_at = 4;
}

message Foo {
    int64 id = 1;
    string title = 2;
    string desc = 3;
    SystemFields sys_fields = 4;
}

message CreateRequest {
    string api_version = 1;
    Foo foo = 2;
}

message CreateResponse {
    string api_version = 1;
    int64 id = 2;
}

message ReadRequest {
    string api_version = 1;
    int64 id = 2;
}

message ReadResponse {
    string api_version = 1;
    Foo foo = 2;
}

message UpdateRequest {
    string api_version = 1;
    Foo foo = 2;
}

message UpdateResponse {
    string api_version = 1;
    int64 count = 2;
}

message DeleteRequest {
    string api_version = 1;
    int64 id = 2;
}

message DeleteResponse {
    string api_version = 1;
    int64 count = 2;
}

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
        title: "Foo Service";
        version: "1.0";
    };
    external_docs: {
      url: "https://github.com/wubgjwibg/grpc-gateway-boilerplate";
      description: "gRPC-gateway boilerplate repository";
    }
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
    responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
  };

service FooService {
    rpc Create(CreateRequest) returns (CreateResponse) {
        option (google.api.http) = {
            post: "/api/v1/foo"
            body: "*"
        };
    };
    rpc Read(ReadRequest) returns (ReadResponse) {
        option (google.api.http) = {
            get: "/api/v1/foo/{id}"
        };
    };
    rpc Update(UpdateRequest) returns (UpdateResponse) {
        option (google.api.http) = {
            put: "/api/v1/foo/{foo.id}"
            body: "*"

            additional_bindings {
                patch: "/api/v1/foo/{foo.id}"
                body: "*"
            }
        };
    };
    rpc Delete(DeleteRequest) returns (DeleteResponse) {
        option (google.api.http) = {
            delete: "/api/v1/foo/{id}"
        };
    };
}